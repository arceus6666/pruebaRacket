grammar edu.upb.lp.isc.PR with org.eclipse.xtext.common.Terminals

generate pR "http://www.upb.edu/lp/isc/PR"

Programa:
	';' 'Author:' STRING
	';' name=ID	
	(definiciones+=Definicion)*
	('?' ejecuciones+=Expresion)*
	//|'('Expresion')'
;


Variable:
	name=ID
;

Definicion:
	{Definicion}
	//(define (head args) body ...+)
	//value = (STRING | 'TRUE' | 'FALSE')
	'(''define''('name=ID (args+=Variable)*')'
		e=Expresion
	')'
;

//Definicion:
//	{Definicion}
//	//(define (head args) body ...+)
//	//value = (STRING | 'TRUE' | 'FALSE')
//	'(''define''('name=ID (args+=Argumento)*')'
//		'('definicion=[Definicion] (valores+=Expresion)+')'
//	')'
//;
Expresion:
	(IntExpr | StringExpr | BooleanExpr | CheckBoolExpr | 
	IfExpr | CallExpr | ListExpr | RefVariable | ReadExpr)
;

//Statics
StringValue:
	str = STRING
;

IntValue:
	val = INT
;

IntExpr:
	IntValue | Sum | Mult | Res | Div
;

VariableRef:
	var=[Variable]
;
Sum:
	{Sum}
	'(''+' value+=(IntExpr|CallExpr|VariableRef)*')'
;

Mult:
	{Mult}
	'(''*' value+=(IntExpr|CallExpr|VariableRef)*')'
;

Res:
	{Res}
	'(''-' value+=(IntExpr|CallExpr|VariableRef)*')'
;

Div:
	{Div}
	'(''/' value+=(IntExpr|CallExpr|VariableRef)*')'
;

StringExpr:
	str = StringValue
;

BooleanExpr:
	boolean = ('true' | 'false')
;

CheckBoolExpr:
	(EqualsBoolExpr | MenorBoolExpr | MayorBoolExpr)	
;

EqualsBoolExpr:
//	{EqualsBoolExpr}
	'(''=' e+=Expresion e+=Expresion+')'
;

MenorBoolExpr:
	'(''<' e+=Expresion e+=Expresion+')'
;

MayorBoolExpr:
	'(''>' e+=Expresion e+=Expresion+')'
;

IsEmptyExpr:
//	{IsEmptyExpr}
	'(''isEmpty' arg=ListExpr')'
;

ReadExpr:
	{ReadExpr}
	'read'
;
//////////////

CallExpr:
	'('definicion=[Definicion] parametros+=Expresion*')'
;


RefVariable:
	ref = [Variable]
;

IfExpr:
	//{IfExpr}
	'(''if'	
		'('e=Expresion')' trueE+=Expresion falseE=Expresion
	')'
;

ListExpr:
	ConsList|
	ListList|
	CarList|
	CdrList|
	LengthList
;

ConsList:
	//{ConsList}
	'(''cons' expr+=Expresion '\''list=ListExpr')'
;

ListList:
	{ListList}
	'(' 'list' params+=Expresion*')'
;

CarList:
	//{CarList}
	'(''car' list=ListExpr')'
;

CdrList:
	//{CdrList}
	'(''cdr'list=ListExpr')'
;

LengthList:
	//{LengthList}
	'(''length' list=[Variable]')'
;


WhileExpr:
	'while''('/*boolean expr*/')''{'
		expresiones+=[Expresion]
		
	'}'
;