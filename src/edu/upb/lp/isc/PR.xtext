grammar edu.upb.lp.isc.PR with org.eclipse.xtext.common.Terminals

generate pR "http://www.upb.edu/lp/isc/PR"

Programa:
	';' 'Author:' STRING
	';' name=ID
	(variables+=Variable)*	
	(definiciones+=Definicion)*
	('?' ejecuciones+=Expresion)*
	
;


Variable:
	{Variable}
	//(define id expr)
	'(''define' name=ID expr=Expresion/* | STRING | 'TRUE' | 'FALSE'*/')'
;

Definicion:
	{Definicion}
	//(define (head args) body ...+)
	//value = (STRING | 'TRUE' | 'FALSE')
	'(''define''('name=ID (args+=Variable)*')'
		e=Expresion
	')'
;

//Definicion:
//	{Definicion}
//	//(define (head args) body ...+)
//	//value = (STRING | 'TRUE' | 'FALSE')
//	'(''define''('name=ID (args+=Argumento)*')'
//		'('definicion=[Definicion] (valores+=Expresion)+')'
//	')'
//;
Expresion:
	(IntExpr | StringExpr | BooleanExpr | 
	IfExpr | CallExpr | ListExpr | RefVariable )
;

//Statics
StringValue:
	str = STRING
;

IntValue:
	val = INT
;

IntExpr:
	IntValue | Sum | Mult | Res | Div
;

Sum:
	{Sum}
	'(''+' value+=IntExpr*')'
;

Mult:
	{Mult}
	'(''*' value+=IntExpr*')'
;

Res:
	{Res}
	'(''-' value+=IntExpr*')'
;

Div:
	{Div}
	'(''/' value1+=IntExpr')'
;

StringExpr:
	str = StringValue
;

BooleanExpr:
	{BooleanExpr}
	('true' | 'false')
;

ExprValue:
	exp = Expresion
;
//////////////

CallExpr:
	'('definicion=[Definicion] parametros+=(Expresion)*')'
;


RefVariable:
	ref = [Variable]
;

IfExpr:
	{IfExpr}
	//TODO hacer un if
	'('
	
	IfExpr=BooleanExpr IfTrue=BooleanExpr IfFalse=BooleanExpr
	//nani
	')'
;

ListExpr:
	//ConsValue|
	ListValue|ComplexListExpr

;

/* 
ConsValue:
	{ConsValue}
	'(''cons' '\''(expr+=Expresion)* (expr+=Expresion)*')'
;
*/


ListValue:
	{ListValue}
	'(''list' (Expr+=Expresion
		     (','Expr+=Expresion)*)?  ')'
;

ComplexListExpr:
		'(' op=ListOp (expr+=ListExpr)+')'
;

ListOp:
//	op=('car'|'cdr'|'length')
op=(Car|Cdr)
;
Car:
	car='car'
;
Cdr:
	cdr='cdr'
;

WhileExpr:
	'while''('/*boolean expr*/')''{'
		expresiones+=[Expresion]
		
	'}'
;