/*
 * generated by Xtext 2.12.0
 */
package edu.upb.lp.isc.serializer;

import com.google.inject.Inject;
import edu.upb.lp.isc.pR.BooleanExpr;
import edu.upb.lp.isc.pR.CallExpr;
import edu.upb.lp.isc.pR.CarList;
import edu.upb.lp.isc.pR.CdrList;
import edu.upb.lp.isc.pR.ConsList;
import edu.upb.lp.isc.pR.Definicion;
import edu.upb.lp.isc.pR.Div;
import edu.upb.lp.isc.pR.EqualsBoolExpr;
import edu.upb.lp.isc.pR.IfExpr;
import edu.upb.lp.isc.pR.IntValue;
import edu.upb.lp.isc.pR.IsEmptyExpr;
import edu.upb.lp.isc.pR.LengthList;
import edu.upb.lp.isc.pR.ListList;
import edu.upb.lp.isc.pR.MayorBoolExpr;
import edu.upb.lp.isc.pR.MenorBoolExpr;
import edu.upb.lp.isc.pR.Mult;
import edu.upb.lp.isc.pR.PRPackage;
import edu.upb.lp.isc.pR.Programa;
import edu.upb.lp.isc.pR.ReadExpr;
import edu.upb.lp.isc.pR.RefVariable;
import edu.upb.lp.isc.pR.Res;
import edu.upb.lp.isc.pR.StringExpr;
import edu.upb.lp.isc.pR.StringValue;
import edu.upb.lp.isc.pR.Sum;
import edu.upb.lp.isc.pR.Variable;
import edu.upb.lp.isc.pR.VariableRef;
import edu.upb.lp.isc.pR.WhileExpr;
import edu.upb.lp.isc.services.PRGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PRSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PRGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PRPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PRPackage.BOOLEAN_EXPR:
				sequence_BooleanExpr(context, (BooleanExpr) semanticObject); 
				return; 
			case PRPackage.CALL_EXPR:
				sequence_CallExpr(context, (CallExpr) semanticObject); 
				return; 
			case PRPackage.CAR_LIST:
				sequence_CarList(context, (CarList) semanticObject); 
				return; 
			case PRPackage.CDR_LIST:
				sequence_CdrList(context, (CdrList) semanticObject); 
				return; 
			case PRPackage.CONS_LIST:
				sequence_ConsList(context, (ConsList) semanticObject); 
				return; 
			case PRPackage.DEFINICION:
				sequence_Definicion(context, (Definicion) semanticObject); 
				return; 
			case PRPackage.DIV:
				sequence_Div(context, (Div) semanticObject); 
				return; 
			case PRPackage.EQUALS_BOOL_EXPR:
				sequence_EqualsBoolExpr(context, (EqualsBoolExpr) semanticObject); 
				return; 
			case PRPackage.IF_EXPR:
				sequence_IfExpr(context, (IfExpr) semanticObject); 
				return; 
			case PRPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case PRPackage.IS_EMPTY_EXPR:
				sequence_IsEmptyExpr(context, (IsEmptyExpr) semanticObject); 
				return; 
			case PRPackage.LENGTH_LIST:
				sequence_LengthList(context, (LengthList) semanticObject); 
				return; 
			case PRPackage.LIST_LIST:
				sequence_ListList(context, (ListList) semanticObject); 
				return; 
			case PRPackage.MAYOR_BOOL_EXPR:
				sequence_MayorBoolExpr(context, (MayorBoolExpr) semanticObject); 
				return; 
			case PRPackage.MENOR_BOOL_EXPR:
				sequence_MenorBoolExpr(context, (MenorBoolExpr) semanticObject); 
				return; 
			case PRPackage.MULT:
				sequence_Mult(context, (Mult) semanticObject); 
				return; 
			case PRPackage.PROGRAMA:
				sequence_Programa(context, (Programa) semanticObject); 
				return; 
			case PRPackage.READ_EXPR:
				sequence_ReadExpr(context, (ReadExpr) semanticObject); 
				return; 
			case PRPackage.REF_VARIABLE:
				sequence_RefVariable(context, (RefVariable) semanticObject); 
				return; 
			case PRPackage.RES:
				sequence_Res(context, (Res) semanticObject); 
				return; 
			case PRPackage.STRING_EXPR:
				sequence_StringExpr(context, (StringExpr) semanticObject); 
				return; 
			case PRPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case PRPackage.SUM:
				sequence_Sum(context, (Sum) semanticObject); 
				return; 
			case PRPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case PRPackage.VARIABLE_REF:
				sequence_VariableRef(context, (VariableRef) semanticObject); 
				return; 
			case PRPackage.WHILE_EXPR:
				sequence_WhileExpr(context, (WhileExpr) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expresion returns BooleanExpr
	 *     BooleanExpr returns BooleanExpr
	 *
	 * Constraint:
	 *     (boolean='true' | boolean='false')
	 */
	protected void sequence_BooleanExpr(ISerializationContext context, BooleanExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns CallExpr
	 *     CallExpr returns CallExpr
	 *
	 * Constraint:
	 *     (definicion=[Definicion|ID] parametros+=Expresion*)
	 */
	protected void sequence_CallExpr(ISerializationContext context, CallExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns CarList
	 *     ListExpr returns CarList
	 *     CarList returns CarList
	 *
	 * Constraint:
	 *     list=ListExpr
	 */
	protected void sequence_CarList(ISerializationContext context, CarList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.CAR_LIST__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.CAR_LIST__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarListAccess().getListListExprParserRuleCall_2_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns CdrList
	 *     ListExpr returns CdrList
	 *     CdrList returns CdrList
	 *
	 * Constraint:
	 *     list=ListExpr
	 */
	protected void sequence_CdrList(ISerializationContext context, CdrList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.CDR_LIST__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.CDR_LIST__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCdrListAccess().getListListExprParserRuleCall_2_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ConsList
	 *     ListExpr returns ConsList
	 *     ConsList returns ConsList
	 *
	 * Constraint:
	 *     (expr+=Expresion list=ListExpr)
	 */
	protected void sequence_ConsList(ISerializationContext context, ConsList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definicion returns Definicion
	 *
	 * Constraint:
	 *     (name=ID args+=Variable* e=Expresion)
	 */
	protected void sequence_Definicion(ISerializationContext context, Definicion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Div
	 *     IntExpr returns Div
	 *     Div returns Div
	 *
	 * Constraint:
	 *     (value+=IntExpr | value+=CallExpr | value+=VariableRef)*
	 */
	protected void sequence_Div(ISerializationContext context, Div semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns EqualsBoolExpr
	 *     CheckBoolExpr returns EqualsBoolExpr
	 *     EqualsBoolExpr returns EqualsBoolExpr
	 *
	 * Constraint:
	 *     (e+=Expresion e+=Expresion+)
	 */
	protected void sequence_EqualsBoolExpr(ISerializationContext context, EqualsBoolExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns IfExpr
	 *     IfExpr returns IfExpr
	 *
	 * Constraint:
	 *     (e=Expresion trueE+=Expresion falseE=Expresion)
	 */
	protected void sequence_IfExpr(ISerializationContext context, IfExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns IntValue
	 *     IntValue returns IntValue
	 *     IntExpr returns IntValue
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.INT_VALUE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.INT_VALUE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IsEmptyExpr returns IsEmptyExpr
	 *
	 * Constraint:
	 *     arg=ListExpr
	 */
	protected void sequence_IsEmptyExpr(ISerializationContext context, IsEmptyExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.IS_EMPTY_EXPR__ARG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.IS_EMPTY_EXPR__ARG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIsEmptyExprAccess().getArgListExprParserRuleCall_2_0(), semanticObject.getArg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns LengthList
	 *     ListExpr returns LengthList
	 *     LengthList returns LengthList
	 *
	 * Constraint:
	 *     list=[Variable|ID]
	 */
	protected void sequence_LengthList(ISerializationContext context, LengthList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.LENGTH_LIST__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.LENGTH_LIST__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLengthListAccess().getListVariableIDTerminalRuleCall_2_0_1(), semanticObject.eGet(PRPackage.Literals.LENGTH_LIST__LIST, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ListList
	 *     ListExpr returns ListList
	 *     ListList returns ListList
	 *
	 * Constraint:
	 *     params+=Expresion*
	 */
	protected void sequence_ListList(ISerializationContext context, ListList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns MayorBoolExpr
	 *     CheckBoolExpr returns MayorBoolExpr
	 *     MayorBoolExpr returns MayorBoolExpr
	 *
	 * Constraint:
	 *     (e+=Expresion e+=Expresion+)
	 */
	protected void sequence_MayorBoolExpr(ISerializationContext context, MayorBoolExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns MenorBoolExpr
	 *     CheckBoolExpr returns MenorBoolExpr
	 *     MenorBoolExpr returns MenorBoolExpr
	 *
	 * Constraint:
	 *     (e+=Expresion e+=Expresion+)
	 */
	protected void sequence_MenorBoolExpr(ISerializationContext context, MenorBoolExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Mult
	 *     IntExpr returns Mult
	 *     Mult returns Mult
	 *
	 * Constraint:
	 *     (value+=IntExpr | value+=CallExpr | value+=VariableRef)*
	 */
	protected void sequence_Mult(ISerializationContext context, Mult semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programa returns Programa
	 *
	 * Constraint:
	 *     (name=ID definiciones+=Definicion* ejecuciones+=Expresion*)
	 */
	protected void sequence_Programa(ISerializationContext context, Programa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ReadExpr
	 *     ReadExpr returns ReadExpr
	 *
	 * Constraint:
	 *     {ReadExpr}
	 */
	protected void sequence_ReadExpr(ISerializationContext context, ReadExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns RefVariable
	 *     RefVariable returns RefVariable
	 *
	 * Constraint:
	 *     ref=[Variable|ID]
	 */
	protected void sequence_RefVariable(ISerializationContext context, RefVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.REF_VARIABLE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.REF_VARIABLE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefVariableAccess().getRefVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(PRPackage.Literals.REF_VARIABLE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Res
	 *     IntExpr returns Res
	 *     Res returns Res
	 *
	 * Constraint:
	 *     (value+=IntExpr | value+=CallExpr | value+=VariableRef)*
	 */
	protected void sequence_Res(ISerializationContext context, Res semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns StringExpr
	 *     StringExpr returns StringExpr
	 *
	 * Constraint:
	 *     str=StringValue
	 */
	protected void sequence_StringExpr(ISerializationContext context, StringExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.STRING_EXPR__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.STRING_EXPR__STR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringExprAccess().getStrStringValueParserRuleCall_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     str=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.STRING_VALUE__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.STRING_VALUE__STR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getStrSTRINGTerminalRuleCall_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns Sum
	 *     IntExpr returns Sum
	 *     Sum returns Sum
	 *
	 * Constraint:
	 *     (value+=IntExpr | value+=CallExpr | value+=VariableRef)*
	 */
	protected void sequence_Sum(ISerializationContext context, Sum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableRef returns VariableRef
	 *
	 * Constraint:
	 *     var=[Variable|ID]
	 */
	protected void sequence_VariableRef(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.VARIABLE_REF__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.VARIABLE_REF__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableRefAccess().getVarVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(PRPackage.Literals.VARIABLE_REF__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PRPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PRPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WhileExpr returns WhileExpr
	 *
	 * Constraint:
	 *     expresiones+=[Expresion|ID]
	 */
	protected void sequence_WhileExpr(ISerializationContext context, WhileExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
