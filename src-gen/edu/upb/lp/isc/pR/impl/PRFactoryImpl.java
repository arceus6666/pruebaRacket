/**
 * generated by Xtext 2.12.0
 */
package edu.upb.lp.isc.pR.impl;

import edu.upb.lp.isc.pR.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PRFactoryImpl extends EFactoryImpl implements PRFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PRFactory init()
  {
    try
    {
      PRFactory thePRFactory = (PRFactory)EPackage.Registry.INSTANCE.getEFactory(PRPackage.eNS_URI);
      if (thePRFactory != null)
      {
        return thePRFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PRFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PRFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PRPackage.PROGRAMA: return createPrograma();
      case PRPackage.VARIABLE: return createVariable();
      case PRPackage.DEFINICION: return createDefinicion();
      case PRPackage.EXPRESION: return createExpresion();
      case PRPackage.STRING_VALUE: return createStringValue();
      case PRPackage.INT_VALUE: return createIntValue();
      case PRPackage.INT_EXPR: return createIntExpr();
      case PRPackage.SUM: return createSum();
      case PRPackage.MULT: return createMult();
      case PRPackage.RES: return createRes();
      case PRPackage.DIV: return createDiv();
      case PRPackage.STRING_EXPR: return createStringExpr();
      case PRPackage.BOOLEAN_EXPR: return createBooleanExpr();
      case PRPackage.EXPR_VALUE: return createExprValue();
      case PRPackage.CALL_EXPR: return createCallExpr();
      case PRPackage.REF_VARIABLE: return createRefVariable();
      case PRPackage.IF_EXPR: return createIfExpr();
      case PRPackage.LIST_EXPR: return createListExpr();
      case PRPackage.LIST_VALUE: return createListValue();
      case PRPackage.COMPLEX_LIST_EXPR: return createComplexListExpr();
      case PRPackage.LIST_OP: return createListOp();
      case PRPackage.CAR: return createCar();
      case PRPackage.CDR: return createCdr();
      case PRPackage.WHILE_EXPR: return createWhileExpr();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Programa createPrograma()
  {
    ProgramaImpl programa = new ProgramaImpl();
    return programa;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definicion createDefinicion()
  {
    DefinicionImpl definicion = new DefinicionImpl();
    return definicion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expresion createExpresion()
  {
    ExpresionImpl expresion = new ExpresionImpl();
    return expresion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringValue createStringValue()
  {
    StringValueImpl stringValue = new StringValueImpl();
    return stringValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntValue createIntValue()
  {
    IntValueImpl intValue = new IntValueImpl();
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntExpr createIntExpr()
  {
    IntExprImpl intExpr = new IntExprImpl();
    return intExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sum createSum()
  {
    SumImpl sum = new SumImpl();
    return sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Res createRes()
  {
    ResImpl res = new ResImpl();
    return res;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringExpr createStringExpr()
  {
    StringExprImpl stringExpr = new StringExprImpl();
    return stringExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExpr createBooleanExpr()
  {
    BooleanExprImpl booleanExpr = new BooleanExprImpl();
    return booleanExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprValue createExprValue()
  {
    ExprValueImpl exprValue = new ExprValueImpl();
    return exprValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CallExpr createCallExpr()
  {
    CallExprImpl callExpr = new CallExprImpl();
    return callExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefVariable createRefVariable()
  {
    RefVariableImpl refVariable = new RefVariableImpl();
    return refVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpr createIfExpr()
  {
    IfExprImpl ifExpr = new IfExprImpl();
    return ifExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListExpr createListExpr()
  {
    ListExprImpl listExpr = new ListExprImpl();
    return listExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListValue createListValue()
  {
    ListValueImpl listValue = new ListValueImpl();
    return listValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexListExpr createComplexListExpr()
  {
    ComplexListExprImpl complexListExpr = new ComplexListExprImpl();
    return complexListExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOp createListOp()
  {
    ListOpImpl listOp = new ListOpImpl();
    return listOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Car createCar()
  {
    CarImpl car = new CarImpl();
    return car;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cdr createCdr()
  {
    CdrImpl cdr = new CdrImpl();
    return cdr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileExpr createWhileExpr()
  {
    WhileExprImpl whileExpr = new WhileExprImpl();
    return whileExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PRPackage getPRPackage()
  {
    return (PRPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PRPackage getPackage()
  {
    return PRPackage.eINSTANCE;
  }

} //PRFactoryImpl
