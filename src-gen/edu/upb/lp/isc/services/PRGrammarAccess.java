/*
 * generated by Xtext 2.12.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PRGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAuthorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cDefinicionesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefinicionesDefinicionParserRuleCall_7_0 = (RuleCall)cDefinicionesAssignment_7.eContents().get(0);
		private final Assignment cEjecucionesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEjecucionesEjecucionParserRuleCall_8_0 = (RuleCall)cEjecucionesAssignment_8.eContents().get(0);
		
		//Programa:
		//	';' 'Author' ':' STRING
		//	';' name=ID
		//	variables+=Variable*
		//	definiciones+=Definicion*
		//	ejecuciones+=Ejecucion*;
		@Override public ParserRule getRule() { return rule; }
		
		//';' 'Author' ':' STRING ';' name=ID variables+=Variable* definiciones+=Definicion* ejecuciones+=Ejecucion*
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'Author'
		public Keyword getAuthorKeyword_1() { return cAuthorKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }
		
		//definiciones+=Definicion*
		public Assignment getDefinicionesAssignment_7() { return cDefinicionesAssignment_7; }
		
		//Definicion
		public RuleCall getDefinicionesDefinicionParserRuleCall_7_0() { return cDefinicionesDefinicionParserRuleCall_7_0; }
		
		//ejecuciones+=Ejecucion*
		public Assignment getEjecucionesAssignment_8() { return cEjecucionesAssignment_8; }
		
		//Ejecucion
		public RuleCall getEjecucionesEjecucionParserRuleCall_8_0() { return cEjecucionesEjecucionParserRuleCall_8_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Variable:
		//	{Variable}
		//	//(define id expr)
		//	'(' 'define' name=ID value=Value /* | STRING | 'TRUE' | 'FALSE'*/ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} //(define id expr)
		//'(' 'define' name=ID value=Value /* | STRING | 'TRUE' | 'FALSE'*/ ')'
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		////(define id expr)
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'define'
		public Keyword getDefineKeyword_2() { return cDefineKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		///* | STRING | 'TRUE' | 'FALSE'*/ ')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DefinicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Definicion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinicionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cArgsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgsArgumentoParserRuleCall_5_0 = (RuleCall)cArgsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperadorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperadorOperadorParserRuleCall_8_0 = (RuleCall)cOperadorAssignment_8.eContents().get(0);
		private final Assignment cValue1Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cValue1ValueParserRuleCall_9_0 = (RuleCall)cValue1Assignment_9.eContents().get(0);
		private final Assignment cValue2Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cValue2ValueParserRuleCall_10_0 = (RuleCall)cValue2Assignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Definicion:
		//	{Definicion}
		//	//(define (head args) body ...+)
		//	//value = (STRING | 'TRUE' | 'FALSE')
		//	'(' 'define' '(' name /*head*/ =ID args=Argumento ')'
		//	/*body*/ '(' operador=Operador value1=Value value2=Value ')'
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Definicion} //(define (head args) body ...+)
		////value = (STRING | 'TRUE' | 'FALSE')
		//'(' 'define' '(' name /*head*/ =ID args=Argumento ')' /*body*/ '(' operador=Operador value1=Value value2=Value ')' ')'
		public Group getGroup() { return cGroup; }
		
		//{Definicion}
		public Action getDefinicionAction_0() { return cDefinicionAction_0; }
		
		////(define (head args) body ...+)
		////value = (STRING | 'TRUE' | 'FALSE')
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'define'
		public Keyword getDefineKeyword_2() { return cDefineKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//name /*head*/ =ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//args=Argumento
		public Assignment getArgsAssignment_5() { return cArgsAssignment_5; }
		
		//Argumento
		public RuleCall getArgsArgumentoParserRuleCall_5_0() { return cArgsArgumentoParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		///*body*/ '('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//operador=Operador
		public Assignment getOperadorAssignment_8() { return cOperadorAssignment_8; }
		
		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_8_0() { return cOperadorOperadorParserRuleCall_8_0; }
		
		//value1=Value
		public Assignment getValue1Assignment_9() { return cValue1Assignment_9; }
		
		//Value
		public RuleCall getValue1ValueParserRuleCall_9_0() { return cValue1ValueParserRuleCall_9_0; }
		
		//value2=Value
		public Assignment getValue2Assignment_10() { return cValue2Assignment_10; }
		
		//Value
		public RuleCall getValue2ValueParserRuleCall_10_0() { return cValue2ValueParserRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRefValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	RefValue | StringValue | IntValue;
		@Override public ParserRule getRule() { return rule; }
		
		//RefValue | StringValue | IntValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RefValue
		public RuleCall getRefValueParserRuleCall_0() { return cRefValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_2() { return cIntValueParserRuleCall_2; }
	}
	public class RefValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.RefValue");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefArgumentoCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefArgumentoIDTerminalRuleCall_0_1 = (RuleCall)cRefArgumentoCrossReference_0.eContents().get(1);
		
		//RefValue:
		//	ref=[Argumento];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Argumento]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Argumento]
		public CrossReference getRefArgumentoCrossReference_0() { return cRefArgumentoCrossReference_0; }
		
		//ID
		public RuleCall getRefArgumentoIDTerminalRuleCall_0_1() { return cRefArgumentoIDTerminalRuleCall_0_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.StringValue");
		private final Assignment cStrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_0 = (RuleCall)cStrAssignment.eContents().get(0);
		
		//StringValue:
		//	str=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//str=STRING
		public Assignment getStrAssignment() { return cStrAssignment; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0() { return cStrSTRINGTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.IntValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntValue:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class ArgumentoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Argumento");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Argumento:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EjecucionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Ejecucion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinicionesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinicionesDefinicionCrossReference_2_0 = (CrossReference)cDefinicionesAssignment_2.eContents().get(0);
		private final RuleCall cDefinicionesDefinicionIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinicionesDefinicionCrossReference_2_0.eContents().get(1);
		private final Assignment cParametrosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametrosValueParserRuleCall_3_0 = (RuleCall)cParametrosAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ejecucion:
		//	'?' '(' definiciones+=[Definicion] parametros+=Value* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'?' '(' definiciones+=[Definicion] parametros+=Value* ')'
		public Group getGroup() { return cGroup; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//definiciones+=[Definicion]
		public Assignment getDefinicionesAssignment_2() { return cDefinicionesAssignment_2; }
		
		//[Definicion]
		public CrossReference getDefinicionesDefinicionCrossReference_2_0() { return cDefinicionesDefinicionCrossReference_2_0; }
		
		//ID
		public RuleCall getDefinicionesDefinicionIDTerminalRuleCall_2_0_1() { return cDefinicionesDefinicionIDTerminalRuleCall_2_0_1; }
		
		//parametros+=Value*
		public Assignment getParametrosAssignment_3() { return cParametrosAssignment_3; }
		
		//Value
		public RuleCall getParametrosValueParserRuleCall_3_0() { return cParametrosValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OperadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Operador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Operador:
		//	'+' | '-' | '*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final VariableElements pVariable;
	private final DefinicionElements pDefinicion;
	private final ValueElements pValue;
	private final RefValueElements pRefValue;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final ArgumentoElements pArgumento;
	private final EjecucionElements pEjecucion;
	private final OperadorElements pOperador;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PRGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pVariable = new VariableElements();
		this.pDefinicion = new DefinicionElements();
		this.pValue = new ValueElements();
		this.pRefValue = new RefValueElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pArgumento = new ArgumentoElements();
		this.pEjecucion = new EjecucionElements();
		this.pOperador = new OperadorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.PR".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa:
	//	';' 'Author' ':' STRING
	//	';' name=ID
	//	variables+=Variable*
	//	definiciones+=Definicion*
	//	ejecuciones+=Ejecucion*;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Variable:
	//	{Variable}
	//	//(define id expr)
	//	'(' 'define' name=ID value=Value /* | STRING | 'TRUE' | 'FALSE'*/ ')';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Definicion:
	//	{Definicion}
	//	//(define (head args) body ...+)
	//	//value = (STRING | 'TRUE' | 'FALSE')
	//	'(' 'define' '(' name /*head*/ =ID args=Argumento ')'
	//	/*body*/ '(' operador=Operador value1=Value value2=Value ')'
	//	')';
	public DefinicionElements getDefinicionAccess() {
		return pDefinicion;
	}
	
	public ParserRule getDefinicionRule() {
		return getDefinicionAccess().getRule();
	}
	
	//Value:
	//	RefValue | StringValue | IntValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//RefValue:
	//	ref=[Argumento];
	public RefValueElements getRefValueAccess() {
		return pRefValue;
	}
	
	public ParserRule getRefValueRule() {
		return getRefValueAccess().getRule();
	}
	
	//StringValue:
	//	str=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//	val=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//Argumento:
	//	name=ID;
	public ArgumentoElements getArgumentoAccess() {
		return pArgumento;
	}
	
	public ParserRule getArgumentoRule() {
		return getArgumentoAccess().getRule();
	}
	
	//Ejecucion:
	//	'?' '(' definiciones+=[Definicion] parametros+=Value* ')';
	public EjecucionElements getEjecucionAccess() {
		return pEjecucion;
	}
	
	public ParserRule getEjecucionRule() {
		return getEjecucionAccess().getRule();
	}
	
	//Operador:
	//	'+' | '-' | '*' | '/';
	public OperadorElements getOperadorAccess() {
		return pOperador;
	}
	
	public ParserRule getOperadorRule() {
		return getOperadorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
