/*
 * generated by Xtext 2.12.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PRGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAuthorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cDefinicionesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinicionesDefinicionParserRuleCall_5_0 = (RuleCall)cDefinicionesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cQuestionMarkKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEjecucionesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEjecucionesExpresionParserRuleCall_6_1_0 = (RuleCall)cEjecucionesAssignment_6_1.eContents().get(0);
		
		//Programa:
		//	';' 'Author:' STRING
		//	';' name=ID
		//	definiciones+=Definicion* ('?' ejecuciones+=Expresion)*
		//	//|'('Expresion')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//';' 'Author:' STRING ';' name=ID definiciones+=Definicion* ('?' ejecuciones+=Expresion)*
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//'Author:'
		public Keyword getAuthorKeyword_1() { return cAuthorKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//definiciones+=Definicion*
		public Assignment getDefinicionesAssignment_5() { return cDefinicionesAssignment_5; }
		
		//Definicion
		public RuleCall getDefinicionesDefinicionParserRuleCall_5_0() { return cDefinicionesDefinicionParserRuleCall_5_0; }
		
		//('?' ejecuciones+=Expresion)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_6_0() { return cQuestionMarkKeyword_6_0; }
		
		//ejecuciones+=Expresion
		public Assignment getEjecucionesAssignment_6_1() { return cEjecucionesAssignment_6_1; }
		
		//Expresion
		public RuleCall getEjecucionesExpresionParserRuleCall_6_1_0() { return cEjecucionesExpresionParserRuleCall_6_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DefinicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Definicion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinicionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cArgsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgsVariableParserRuleCall_5_0 = (RuleCall)cArgsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEExpresionParserRuleCall_7_0 = (RuleCall)cEAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Definicion:
		//	{Definicion}
		//	//(define (head args) body ...+)
		//	//value = (STRING | 'TRUE' | 'FALSE')
		//	'(' 'define' '(' name=ID args+=Variable* ')'
		//	e=Expresion
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Definicion} //(define (head args) body ...+)
		////value = (STRING | 'TRUE' | 'FALSE')
		//'(' 'define' '(' name=ID args+=Variable* ')' e=Expresion ')'
		public Group getGroup() { return cGroup; }
		
		//{Definicion}
		public Action getDefinicionAction_0() { return cDefinicionAction_0; }
		
		////(define (head args) body ...+)
		////value = (STRING | 'TRUE' | 'FALSE')
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'define'
		public Keyword getDefineKeyword_2() { return cDefineKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//args+=Variable*
		public Assignment getArgsAssignment_5() { return cArgsAssignment_5; }
		
		//Variable
		public RuleCall getArgsVariableParserRuleCall_5_0() { return cArgsVariableParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//e=Expresion
		public Assignment getEAssignment_7() { return cEAssignment_7; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_7_0() { return cEExpresionParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckBoolExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfExprParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCallExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListExprParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRefVariableParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReadExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////Definicion:
		////	{Definicion}
		////	//(define (head args) body ...+)
		////	//value = (STRING | 'TRUE' | 'FALSE')
		////	'(''define''('name=ID (args+=Argumento)*')'
		////		'('definicion=[Definicion] (valores+=Expresion)+')'
		////	')'
		////;
		//Expresion:
		//	IntExpr | StringExpr | BooleanExpr | CheckBoolExpr | IfExpr | CallExpr | ListExpr | RefVariable | ReadExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//IntExpr | StringExpr | BooleanExpr | CheckBoolExpr | IfExpr | CallExpr | ListExpr | RefVariable | ReadExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntExpr
		public RuleCall getIntExprParserRuleCall_0() { return cIntExprParserRuleCall_0; }
		
		//StringExpr
		public RuleCall getStringExprParserRuleCall_1() { return cStringExprParserRuleCall_1; }
		
		//BooleanExpr
		public RuleCall getBooleanExprParserRuleCall_2() { return cBooleanExprParserRuleCall_2; }
		
		//CheckBoolExpr
		public RuleCall getCheckBoolExprParserRuleCall_3() { return cCheckBoolExprParserRuleCall_3; }
		
		//IfExpr
		public RuleCall getIfExprParserRuleCall_4() { return cIfExprParserRuleCall_4; }
		
		//CallExpr
		public RuleCall getCallExprParserRuleCall_5() { return cCallExprParserRuleCall_5; }
		
		//ListExpr
		public RuleCall getListExprParserRuleCall_6() { return cListExprParserRuleCall_6; }
		
		//RefVariable
		public RuleCall getRefVariableParserRuleCall_7() { return cRefVariableParserRuleCall_7; }
		
		//ReadExpr
		public RuleCall getReadExprParserRuleCall_8() { return cReadExprParserRuleCall_8; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.StringValue");
		private final Assignment cStrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_0 = (RuleCall)cStrAssignment.eContents().get(0);
		
		////Statics
		//StringValue:
		//	str=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//str=STRING
		public Assignment getStrAssignment() { return cStrAssignment; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0() { return cStrSTRINGTerminalRuleCall_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.IntValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntValue:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class IntExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.IntExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDivParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IntExpr:
		//	IntValue | Sum | Mult | Res | Div;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | Sum | Mult | Res | Div
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//Sum
		public RuleCall getSumParserRuleCall_1() { return cSumParserRuleCall_1; }
		
		//Mult
		public RuleCall getMultParserRuleCall_2() { return cMultParserRuleCall_2; }
		
		//Res
		public RuleCall getResParserRuleCall_3() { return cResParserRuleCall_3; }
		
		//Div
		public RuleCall getDivParserRuleCall_4() { return cDivParserRuleCall_4; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.VariableRef");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableCrossReference_0.eContents().get(1);
		
		//VariableRef:
		//	var=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Variable]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[Variable]
		public CrossReference getVarVariableCrossReference_0() { return cVarVariableCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_0_1() { return cVarVariableIDTerminalRuleCall_0_1; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSumAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueIntExprParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueCallExprParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueVariableRefParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sum:
		//	{Sum}
		//	'(' '+' value+=(IntExpr | CallExpr | VariableRef)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sum} '(' '+' value+=(IntExpr | CallExpr | VariableRef)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Sum}
		public Action getSumAction_0() { return cSumAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//value+=(IntExpr | CallExpr | VariableRef)*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(IntExpr | CallExpr | VariableRef)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//IntExpr
		public RuleCall getValueIntExprParserRuleCall_3_0_0() { return cValueIntExprParserRuleCall_3_0_0; }
		
		//CallExpr
		public RuleCall getValueCallExprParserRuleCall_3_0_1() { return cValueCallExprParserRuleCall_3_0_1; }
		
		//VariableRef
		public RuleCall getValueVariableRefParserRuleCall_3_0_2() { return cValueVariableRefParserRuleCall_3_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueIntExprParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueCallExprParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueVariableRefParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mult:
		//	{Mult}
		//	'(' '*' value+=(IntExpr | CallExpr | VariableRef)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mult} '(' '*' value+=(IntExpr | CallExpr | VariableRef)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Mult}
		public Action getMultAction_0() { return cMultAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//value+=(IntExpr | CallExpr | VariableRef)*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(IntExpr | CallExpr | VariableRef)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//IntExpr
		public RuleCall getValueIntExprParserRuleCall_3_0_0() { return cValueIntExprParserRuleCall_3_0_0; }
		
		//CallExpr
		public RuleCall getValueCallExprParserRuleCall_3_0_1() { return cValueCallExprParserRuleCall_3_0_1; }
		
		//VariableRef
		public RuleCall getValueVariableRefParserRuleCall_3_0_2() { return cValueVariableRefParserRuleCall_3_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ResElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Res");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueIntExprParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueCallExprParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueVariableRefParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Res:
		//	{Res}
		//	'(' '-' value+=(IntExpr | CallExpr | VariableRef)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Res} '(' '-' value+=(IntExpr | CallExpr | VariableRef)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Res}
		public Action getResAction_0() { return cResAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//value+=(IntExpr | CallExpr | VariableRef)*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(IntExpr | CallExpr | VariableRef)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//IntExpr
		public RuleCall getValueIntExprParserRuleCall_3_0_0() { return cValueIntExprParserRuleCall_3_0_0; }
		
		//CallExpr
		public RuleCall getValueCallExprParserRuleCall_3_0_1() { return cValueCallExprParserRuleCall_3_0_1; }
		
		//VariableRef
		public RuleCall getValueVariableRefParserRuleCall_3_0_2() { return cValueVariableRefParserRuleCall_3_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDivAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueIntExprParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueCallExprParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueVariableRefParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Div:
		//	{Div}
		//	'(' '/' value+=(IntExpr | CallExpr | VariableRef)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Div} '(' '/' value+=(IntExpr | CallExpr | VariableRef)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Div}
		public Action getDivAction_0() { return cDivAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//value+=(IntExpr | CallExpr | VariableRef)*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//(IntExpr | CallExpr | VariableRef)
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }
		
		//IntExpr
		public RuleCall getValueIntExprParserRuleCall_3_0_0() { return cValueIntExprParserRuleCall_3_0_0; }
		
		//CallExpr
		public RuleCall getValueCallExprParserRuleCall_3_0_1() { return cValueCallExprParserRuleCall_3_0_1; }
		
		//VariableRef
		public RuleCall getValueVariableRefParserRuleCall_3_0_2() { return cValueVariableRefParserRuleCall_3_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StringExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.StringExpr");
		private final Assignment cStrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStrStringValueParserRuleCall_0 = (RuleCall)cStrAssignment.eContents().get(0);
		
		//StringExpr:
		//	str=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//str=StringValue
		public Assignment getStrAssignment() { return cStrAssignment; }
		
		//StringValue
		public RuleCall getStrStringValueParserRuleCall_0() { return cStrStringValueParserRuleCall_0; }
	}
	public class BooleanExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.BooleanExpr");
		private final Assignment cBooleanAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBooleanAlternatives_0 = (Alternatives)cBooleanAssignment.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0 = (Keyword)cBooleanAlternatives_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_0_1 = (Keyword)cBooleanAlternatives_0.eContents().get(1);
		
		//BooleanExpr:
		//	boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment() { return cBooleanAssignment; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_0() { return cBooleanAlternatives_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0() { return cBooleanTrueKeyword_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1() { return cBooleanFalseKeyword_0_1; }
	}
	public class CheckBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.CheckBoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEqualsBoolExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMenorBoolExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMayorBoolExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CheckBoolExpr:
		//	EqualsBoolExpr | MenorBoolExpr | MayorBoolExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualsBoolExpr | MenorBoolExpr | MayorBoolExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EqualsBoolExpr
		public RuleCall getEqualsBoolExprParserRuleCall_0() { return cEqualsBoolExprParserRuleCall_0; }
		
		//MenorBoolExpr
		public RuleCall getMenorBoolExprParserRuleCall_1() { return cMenorBoolExprParserRuleCall_1; }
		
		//MayorBoolExpr
		public RuleCall getMayorBoolExprParserRuleCall_2() { return cMayorBoolExprParserRuleCall_2; }
	}
	public class EqualsBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.EqualsBoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpresionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpresionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EqualsBoolExpr: //	{EqualsBoolExpr}
		//	'(' '=' e+=Expresion e+=Expresion+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		////	{EqualsBoolExpr}
		//'(' '=' e+=Expresion e+=Expresion+ ')'
		public Group getGroup() { return cGroup; }
		
		////	{EqualsBoolExpr}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//e+=Expresion
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_2_0() { return cEExpresionParserRuleCall_2_0; }
		
		//e+=Expresion+
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_3_0() { return cEExpresionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MenorBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.MenorBoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpresionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpresionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MenorBoolExpr:
		//	'(' '<' e+=Expresion e+=Expresion+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' '<' e+=Expresion e+=Expresion+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//e+=Expresion
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_2_0() { return cEExpresionParserRuleCall_2_0; }
		
		//e+=Expresion+
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_3_0() { return cEExpresionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MayorBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.MayorBoolExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpresionParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpresionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MayorBoolExpr:
		//	'(' '>' e+=Expresion e+=Expresion+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' '>' e+=Expresion e+=Expresion+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//e+=Expresion
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_2_0() { return cEExpresionParserRuleCall_2_0; }
		
		//e+=Expresion+
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_3_0() { return cEExpresionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IsEmptyExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.IsEmptyExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgListExprParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsEmptyExpr: //	{IsEmptyExpr}
		//	'(' 'isEmpty' arg=ListExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		////	{IsEmptyExpr}
		//'(' 'isEmpty' arg=ListExpr ')'
		public Group getGroup() { return cGroup; }
		
		////	{IsEmptyExpr}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'isEmpty'
		public Keyword getIsEmptyKeyword_1() { return cIsEmptyKeyword_1; }
		
		//arg=ListExpr
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//ListExpr
		public RuleCall getArgListExprParserRuleCall_2_0() { return cArgListExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReadExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.ReadExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReadExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReadExpr:
		//	{ReadExpr}
		//	'read';
		@Override public ParserRule getRule() { return rule; }
		
		//{ReadExpr} 'read'
		public Group getGroup() { return cGroup; }
		
		//{ReadExpr}
		public Action getReadExprAction_0() { return cReadExprAction_0; }
		
		//'read'
		public Keyword getReadKeyword_1() { return cReadKeyword_1; }
	}
	public class CallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.CallExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefinicionDefinicionCrossReference_1_0 = (CrossReference)cDefinicionAssignment_1.eContents().get(0);
		private final RuleCall cDefinicionDefinicionIDTerminalRuleCall_1_0_1 = (RuleCall)cDefinicionDefinicionCrossReference_1_0.eContents().get(1);
		private final Assignment cParametrosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametrosExpresionParserRuleCall_2_0 = (RuleCall)cParametrosAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////////////////
		//CallExpr:
		//	'(' definicion=[Definicion] parametros+=Expresion* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' definicion=[Definicion] parametros+=Expresion* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//definicion=[Definicion]
		public Assignment getDefinicionAssignment_1() { return cDefinicionAssignment_1; }
		
		//[Definicion]
		public CrossReference getDefinicionDefinicionCrossReference_1_0() { return cDefinicionDefinicionCrossReference_1_0; }
		
		//ID
		public RuleCall getDefinicionDefinicionIDTerminalRuleCall_1_0_1() { return cDefinicionDefinicionIDTerminalRuleCall_1_0_1; }
		
		//parametros+=Expresion*
		public Assignment getParametrosAssignment_2() { return cParametrosAssignment_2; }
		
		//Expresion
		public RuleCall getParametrosExpresionParserRuleCall_2_0() { return cParametrosExpresionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RefVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.RefVariable");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_0_1 = (RuleCall)cRefVariableCrossReference_0.eContents().get(1);
		
		//RefVariable:
		//	ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Variable]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_0() { return cRefVariableCrossReference_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_0_1() { return cRefVariableIDTerminalRuleCall_0_1; }
	}
	public class IfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.IfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpresionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTrueEAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTrueEExpresionParserRuleCall_5_0 = (RuleCall)cTrueEAssignment_5.eContents().get(0);
		private final Assignment cFalseEAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFalseEExpresionParserRuleCall_6_0 = (RuleCall)cFalseEAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfExpr: //{IfExpr}
		//	'(' 'if' '(' e=Expresion ')' trueE+=Expresion falseE=Expresion ')';
		@Override public ParserRule getRule() { return rule; }
		
		////{IfExpr}
		//'(' 'if' '(' e=Expresion ')' trueE+=Expresion falseE=Expresion ')'
		public Group getGroup() { return cGroup; }
		
		////{IfExpr}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//e=Expresion
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//Expresion
		public RuleCall getEExpresionParserRuleCall_3_0() { return cEExpresionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//trueE+=Expresion
		public Assignment getTrueEAssignment_5() { return cTrueEAssignment_5; }
		
		//Expresion
		public RuleCall getTrueEExpresionParserRuleCall_5_0() { return cTrueEExpresionParserRuleCall_5_0; }
		
		//falseE=Expresion
		public Assignment getFalseEAssignment_6() { return cFalseEAssignment_6; }
		
		//Expresion
		public RuleCall getFalseEExpresionParserRuleCall_6_0() { return cFalseEExpresionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ListExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.ListExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConsListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCarListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCdrListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLengthListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ListExpr:
		//	ConsList | ListList | CarList | CdrList | LengthList;
		@Override public ParserRule getRule() { return rule; }
		
		//ConsList | ListList | CarList | CdrList | LengthList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConsList
		public RuleCall getConsListParserRuleCall_0() { return cConsListParserRuleCall_0; }
		
		//ListList
		public RuleCall getListListParserRuleCall_1() { return cListListParserRuleCall_1; }
		
		//CarList
		public RuleCall getCarListParserRuleCall_2() { return cCarListParserRuleCall_2; }
		
		//CdrList
		public RuleCall getCdrListParserRuleCall_3() { return cCdrListParserRuleCall_3; }
		
		//LengthList
		public RuleCall getLengthListParserRuleCall_4() { return cLengthListParserRuleCall_4; }
	}
	public class ConsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.ConsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpresionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListListExprParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConsList: //{ConsList}
		//	'(' 'cons' expr+=Expresion '\'' list=ListExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		////{ConsList}
		//'(' 'cons' expr+=Expresion '\'' list=ListExpr ')'
		public Group getGroup() { return cGroup; }
		
		////{ConsList}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'cons'
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }
		
		//expr+=Expresion
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expresion
		public RuleCall getExprExpresionParserRuleCall_2_0() { return cExprExpresionParserRuleCall_2_0; }
		
		//'\''
		public Keyword getApostropheKeyword_3() { return cApostropheKeyword_3; }
		
		//list=ListExpr
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//ListExpr
		public RuleCall getListListExprParserRuleCall_4_0() { return cListListExprParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ListListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.ListList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsExpresionParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListList:
		//	{ListList}
		//	'(' 'list' params+=Expresion* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListList} '(' 'list' params+=Expresion* ')'
		public Group getGroup() { return cGroup; }
		
		//{ListList}
		public Action getListListAction_0() { return cListListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//params+=Expresion*
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Expresion
		public RuleCall getParamsExpresionParserRuleCall_3_0() { return cParamsExpresionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.CarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListListExprParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CarList: //{CarList}
		//	'(' 'car' list=ListExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		////{CarList}
		//'(' 'car' list=ListExpr ')'
		public Group getGroup() { return cGroup; }
		
		////{CarList}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'car'
		public Keyword getCarKeyword_1() { return cCarKeyword_1; }
		
		//list=ListExpr
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//ListExpr
		public RuleCall getListListExprParserRuleCall_2_0() { return cListListExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CdrListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.CdrList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCdrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListListExprParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CdrList: //{CdrList}
		//	'(' 'cdr' list=ListExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		////{CdrList}
		//'(' 'cdr' list=ListExpr ')'
		public Group getGroup() { return cGroup; }
		
		////{CdrList}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'cdr'
		public Keyword getCdrKeyword_1() { return cCdrKeyword_1; }
		
		//list=ListExpr
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//ListExpr
		public RuleCall getListListExprParserRuleCall_2_0() { return cListListExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LengthListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.LengthList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cListVariableCrossReference_2_0 = (CrossReference)cListAssignment_2.eContents().get(0);
		private final RuleCall cListVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cListVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LengthList: //{LengthList}
		//	'(' 'length' list=[Variable] ')';
		@Override public ParserRule getRule() { return rule; }
		
		////{LengthList}
		//'(' 'length' list=[Variable] ')'
		public Group getGroup() { return cGroup; }
		
		////{LengthList}
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//list=[Variable]
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//[Variable]
		public CrossReference getListVariableCrossReference_2_0() { return cListVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getListVariableIDTerminalRuleCall_2_0_1() { return cListVariableIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WhileExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.PR.WhileExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpresionesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cExpresionesExpresionCrossReference_4_0 = (CrossReference)cExpresionesAssignment_4.eContents().get(0);
		private final RuleCall cExpresionesExpresionIDTerminalRuleCall_4_0_1 = (RuleCall)cExpresionesExpresionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WhileExpr:
		//	'while' '(' /*boolean expr*/ ')' '{'
		//	expresiones+=[Expresion]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' /*boolean expr*/ ')' '{' expresiones+=[Expresion] '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		///*boolean expr*/ ')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expresiones+=[Expresion]
		public Assignment getExpresionesAssignment_4() { return cExpresionesAssignment_4; }
		
		//[Expresion]
		public CrossReference getExpresionesExpresionCrossReference_4_0() { return cExpresionesExpresionCrossReference_4_0; }
		
		//ID
		public RuleCall getExpresionesExpresionIDTerminalRuleCall_4_0_1() { return cExpresionesExpresionIDTerminalRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final VariableElements pVariable;
	private final DefinicionElements pDefinicion;
	private final ExpresionElements pExpresion;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final IntExprElements pIntExpr;
	private final VariableRefElements pVariableRef;
	private final SumElements pSum;
	private final MultElements pMult;
	private final ResElements pRes;
	private final DivElements pDiv;
	private final StringExprElements pStringExpr;
	private final BooleanExprElements pBooleanExpr;
	private final CheckBoolExprElements pCheckBoolExpr;
	private final EqualsBoolExprElements pEqualsBoolExpr;
	private final MenorBoolExprElements pMenorBoolExpr;
	private final MayorBoolExprElements pMayorBoolExpr;
	private final IsEmptyExprElements pIsEmptyExpr;
	private final ReadExprElements pReadExpr;
	private final CallExprElements pCallExpr;
	private final RefVariableElements pRefVariable;
	private final IfExprElements pIfExpr;
	private final ListExprElements pListExpr;
	private final ConsListElements pConsList;
	private final ListListElements pListList;
	private final CarListElements pCarList;
	private final CdrListElements pCdrList;
	private final LengthListElements pLengthList;
	private final WhileExprElements pWhileExpr;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PRGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pVariable = new VariableElements();
		this.pDefinicion = new DefinicionElements();
		this.pExpresion = new ExpresionElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pIntExpr = new IntExprElements();
		this.pVariableRef = new VariableRefElements();
		this.pSum = new SumElements();
		this.pMult = new MultElements();
		this.pRes = new ResElements();
		this.pDiv = new DivElements();
		this.pStringExpr = new StringExprElements();
		this.pBooleanExpr = new BooleanExprElements();
		this.pCheckBoolExpr = new CheckBoolExprElements();
		this.pEqualsBoolExpr = new EqualsBoolExprElements();
		this.pMenorBoolExpr = new MenorBoolExprElements();
		this.pMayorBoolExpr = new MayorBoolExprElements();
		this.pIsEmptyExpr = new IsEmptyExprElements();
		this.pReadExpr = new ReadExprElements();
		this.pCallExpr = new CallExprElements();
		this.pRefVariable = new RefVariableElements();
		this.pIfExpr = new IfExprElements();
		this.pListExpr = new ListExprElements();
		this.pConsList = new ConsListElements();
		this.pListList = new ListListElements();
		this.pCarList = new CarListElements();
		this.pCdrList = new CdrListElements();
		this.pLengthList = new LengthListElements();
		this.pWhileExpr = new WhileExprElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.PR".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa:
	//	';' 'Author:' STRING
	//	';' name=ID
	//	definiciones+=Definicion* ('?' ejecuciones+=Expresion)*
	//	//|'('Expresion')'
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Definicion:
	//	{Definicion}
	//	//(define (head args) body ...+)
	//	//value = (STRING | 'TRUE' | 'FALSE')
	//	'(' 'define' '(' name=ID args+=Variable* ')'
	//	e=Expresion
	//	')';
	public DefinicionElements getDefinicionAccess() {
		return pDefinicion;
	}
	
	public ParserRule getDefinicionRule() {
		return getDefinicionAccess().getRule();
	}
	
	////Definicion:
	////	{Definicion}
	////	//(define (head args) body ...+)
	////	//value = (STRING | 'TRUE' | 'FALSE')
	////	'(''define''('name=ID (args+=Argumento)*')'
	////		'('definicion=[Definicion] (valores+=Expresion)+')'
	////	')'
	////;
	//Expresion:
	//	IntExpr | StringExpr | BooleanExpr | CheckBoolExpr | IfExpr | CallExpr | ListExpr | RefVariable | ReadExpr;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	////Statics
	//StringValue:
	//	str=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IntValue:
	//	val=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//IntExpr:
	//	IntValue | Sum | Mult | Res | Div;
	public IntExprElements getIntExprAccess() {
		return pIntExpr;
	}
	
	public ParserRule getIntExprRule() {
		return getIntExprAccess().getRule();
	}
	
	//VariableRef:
	//	var=[Variable];
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Sum:
	//	{Sum}
	//	'(' '+' value+=(IntExpr | CallExpr | VariableRef)* ')';
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Mult:
	//	{Mult}
	//	'(' '*' value+=(IntExpr | CallExpr | VariableRef)* ')';
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}
	
	//Res:
	//	{Res}
	//	'(' '-' value+=(IntExpr | CallExpr | VariableRef)* ')';
	public ResElements getResAccess() {
		return pRes;
	}
	
	public ParserRule getResRule() {
		return getResAccess().getRule();
	}
	
	//Div:
	//	{Div}
	//	'(' '/' value+=(IntExpr | CallExpr | VariableRef)* ')';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//StringExpr:
	//	str=StringValue;
	public StringExprElements getStringExprAccess() {
		return pStringExpr;
	}
	
	public ParserRule getStringExprRule() {
		return getStringExprAccess().getRule();
	}
	
	//BooleanExpr:
	//	boolean=('true' | 'false');
	public BooleanExprElements getBooleanExprAccess() {
		return pBooleanExpr;
	}
	
	public ParserRule getBooleanExprRule() {
		return getBooleanExprAccess().getRule();
	}
	
	//CheckBoolExpr:
	//	EqualsBoolExpr | MenorBoolExpr | MayorBoolExpr;
	public CheckBoolExprElements getCheckBoolExprAccess() {
		return pCheckBoolExpr;
	}
	
	public ParserRule getCheckBoolExprRule() {
		return getCheckBoolExprAccess().getRule();
	}
	
	//EqualsBoolExpr: //	{EqualsBoolExpr}
	//	'(' '=' e+=Expresion e+=Expresion+ ')';
	public EqualsBoolExprElements getEqualsBoolExprAccess() {
		return pEqualsBoolExpr;
	}
	
	public ParserRule getEqualsBoolExprRule() {
		return getEqualsBoolExprAccess().getRule();
	}
	
	//MenorBoolExpr:
	//	'(' '<' e+=Expresion e+=Expresion+ ')';
	public MenorBoolExprElements getMenorBoolExprAccess() {
		return pMenorBoolExpr;
	}
	
	public ParserRule getMenorBoolExprRule() {
		return getMenorBoolExprAccess().getRule();
	}
	
	//MayorBoolExpr:
	//	'(' '>' e+=Expresion e+=Expresion+ ')';
	public MayorBoolExprElements getMayorBoolExprAccess() {
		return pMayorBoolExpr;
	}
	
	public ParserRule getMayorBoolExprRule() {
		return getMayorBoolExprAccess().getRule();
	}
	
	//IsEmptyExpr: //	{IsEmptyExpr}
	//	'(' 'isEmpty' arg=ListExpr ')';
	public IsEmptyExprElements getIsEmptyExprAccess() {
		return pIsEmptyExpr;
	}
	
	public ParserRule getIsEmptyExprRule() {
		return getIsEmptyExprAccess().getRule();
	}
	
	//ReadExpr:
	//	{ReadExpr}
	//	'read';
	public ReadExprElements getReadExprAccess() {
		return pReadExpr;
	}
	
	public ParserRule getReadExprRule() {
		return getReadExprAccess().getRule();
	}
	
	////////////////
	//CallExpr:
	//	'(' definicion=[Definicion] parametros+=Expresion* ')';
	public CallExprElements getCallExprAccess() {
		return pCallExpr;
	}
	
	public ParserRule getCallExprRule() {
		return getCallExprAccess().getRule();
	}
	
	//RefVariable:
	//	ref=[Variable];
	public RefVariableElements getRefVariableAccess() {
		return pRefVariable;
	}
	
	public ParserRule getRefVariableRule() {
		return getRefVariableAccess().getRule();
	}
	
	//IfExpr: //{IfExpr}
	//	'(' 'if' '(' e=Expresion ')' trueE+=Expresion falseE=Expresion ')';
	public IfExprElements getIfExprAccess() {
		return pIfExpr;
	}
	
	public ParserRule getIfExprRule() {
		return getIfExprAccess().getRule();
	}
	
	//ListExpr:
	//	ConsList | ListList | CarList | CdrList | LengthList;
	public ListExprElements getListExprAccess() {
		return pListExpr;
	}
	
	public ParserRule getListExprRule() {
		return getListExprAccess().getRule();
	}
	
	//ConsList: //{ConsList}
	//	'(' 'cons' expr+=Expresion '\'' list=ListExpr ')';
	public ConsListElements getConsListAccess() {
		return pConsList;
	}
	
	public ParserRule getConsListRule() {
		return getConsListAccess().getRule();
	}
	
	//ListList:
	//	{ListList}
	//	'(' 'list' params+=Expresion* ')';
	public ListListElements getListListAccess() {
		return pListList;
	}
	
	public ParserRule getListListRule() {
		return getListListAccess().getRule();
	}
	
	//CarList: //{CarList}
	//	'(' 'car' list=ListExpr ')';
	public CarListElements getCarListAccess() {
		return pCarList;
	}
	
	public ParserRule getCarListRule() {
		return getCarListAccess().getRule();
	}
	
	//CdrList: //{CdrList}
	//	'(' 'cdr' list=ListExpr ')';
	public CdrListElements getCdrListAccess() {
		return pCdrList;
	}
	
	public ParserRule getCdrListRule() {
		return getCdrListAccess().getRule();
	}
	
	//LengthList: //{LengthList}
	//	'(' 'length' list=[Variable] ')';
	public LengthListElements getLengthListAccess() {
		return pLengthList;
	}
	
	public ParserRule getLengthListRule() {
		return getLengthListAccess().getRule();
	}
	
	//WhileExpr:
	//	'while' '(' /*boolean expr*/ ')' '{'
	//	expresiones+=[Expresion]
	//	'}';
	public WhileExprElements getWhileExprAccess() {
		return pWhileExpr;
	}
	
	public ParserRule getWhileExprRule() {
		return getWhileExprAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
